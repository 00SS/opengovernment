- title(@state.name)


= render :partial => 'shared/appeal'

.intro
  %div
  %p= t '.intro'

.find_box
  = render :partial => 'shared/find_my_rep_form'

.grid_12.alpha
  .floatright.margin-top= link_to_with_domain('Official Site', @state.official_url)


  %h2= @state.legislature.name
  - if default_session?
    %p= t '.current_session_intro'

  :ruby
    javascript do
      (%q|
        $(function() {
            $("#chamber_tabs").tabs();
        		$("#bill_tabs").tabs();
        	});
      |)
    end

  .people_news_preview
    .grid_12.alpha
      %h3 People in the News
      = link_to('See all', people_path(:sort => 'mentions'), :class => 'see_all')
    .grid_12.alpha
      %ul.sponsor_mugs.grid_12.alpha
        = render :partial => 'people/mug', :collection => @hot_people

.grid_8.alpha.bills
  
  #bill_tabs
    %ul.small_tabs
      %li
        %a{:href => '#recent_bills'} Recent Bills
      %li
        %a{:href => '#key_votes'} Key Votes

    #recent_bills.tab_cont
      %ul
        = render @recent_bills
      %a.more{:href => bills_path(params[:session], :sort => 'recent')} All Recent Bills &rarr;
      .clear

    #key_votes.tab_cont
      .small.quiet From the non-partisan <a href="http://votesmart.org">Project Vote Smart</a>.
      %a.what(href="http://www.votesmart.org/glossary/define.php?term=key%20vote") What's a key vote?

      %ul
        = render @key_votes, :locals => {:hide_key_vote => true}
      %a.more{:href => bills_path(params[:session], :sort => 'keyvotes')} All Key Votes &rarr;
      .clear  

.grid_4.omega
  #chamber_tabs
    %ul.small_tabs
      - @state.chambers.each do |chamber|
        %li
          %a{:href => (chamber.type == 'UpperChamber' ? '#upper' : '#lower')}= chamber.short_name

    - @state.chambers.each do |chamber|
      - session_roles = chamber.roles.for_session(@session.family)
      %div{:id => (chamber.type == 'UpperChamber' ? 'upper' : 'lower')}
        %div.tab_cont.pad
          .grid_6.alpha.district_map
            = leg_map_img(@state, chamber)

          %p
            %strong Legislators:
            = link_to session_roles.count, (chamber.type == 'UpperChamber' ? people_path(current_session.primary, :chamber => 'upper') : people_path(current_session.primary, :chamber => 'lower'))
            = chamber.title.pluralize
            %br            
            = surround '(', ')' do
              = succeed ',' do
                = pluralize(session_roles.democrats.count, t('state.blue_party_label'))
              - if session_roles.others.count > 0
                = succeed ',' do
                  = pluralize(session_roles.republicans.count, t('state.red_party_label'))
                = pluralize(session_roles.others.count, t('state.grey_party_label'))
              - else
                = pluralize(session_roles.republicans.count, t('state.red_party_label'))            
            %br
            %br            
            Each represents approx.
            =t (chamber.type == 'UpperChamber' ? '.state_pop_per_upper_chamber_member' : '.state_pop_per_lower_chamber_member')
            and serves four-year terms with a two-term limit.

          %p
            %strong Committees:
            = succeed ',' do
              = link_to pluralize(chamber.primary_committees.count, 'Committee'), chamber.type == 'UpperChamber' ? upper_committees_path : lower_committees_path
            = link_to pluralize(@state.joint_committees.count, 'Joint Committee'), joint_committees_path
            %br
            = succeed ',' do
              = link_to "#{number_with_delimiter(Bill.for_session_including_children(@session.parent).in_chamber(chamber).count, :delimiter => ',')} Bills", bills_path(params[:session])
            = link_to "#{Bill.for_session_including_children(@session.parent).in_chamber(chamber).with_key_votes.count} Key Votes", bills_path(params[:session], :sort => 'keyvotes')
  
            %br
            =t (chamber.type == 'UpperChamber' ? '.last_election_upper_chamber_open_seats' : '.last_election_lower_chamber_open_seats')
            =t (chamber.type == 'UpperChamber' ? '.last_election_upper_chamber_incumbent_seats' : '.last_election_lower_chamber_incumbent_seats')
  
            =t (chamber.type == 'UpperChamber' ? '.next_election_upper_chamber_seats_available' : '.next_election_lower_chamber_seats_available')

.space

.grid_12.alpha
  .italic.grid_8.alpha
    = raw t '.current_session'
    %br
    = raw t '.state_population'

  .grid_4.omega
    %strong Next Election:
    = raw t '.next_election_date'
    %br

    %strong Last Election:
    = raw t '.last_election_date'

.clear.space


%p.grid_12.alpha= raw t '.background'
